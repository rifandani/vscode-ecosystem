{
  "Import default": {
    "prefix": "vimd",
    "body": ["import ${2:moduleName} from '${1:module}'"],
    "description": "Import default",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Import everything": {
    "prefix": "vime",
    "body": ["import * as ${2:moduleName} from '${1:module}'"],
    "description": "Import everything as",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React useEffect hooks": {
    "prefix": "useEffectSnip",
    "body": [
      "useEffect(() => {",
      "  ${1:effects}",
      "",
      "  return () => {",
      "    ${2:cleanup}",
      "  }",
      "}, [])",
      ""
    ],
    "description": "Creates a React useEffect hooks",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React useContext hooks": {
    "prefix": "useContextSnip",
    "body": [
      "const ${1:name} = useContext(${3:state})",
      ""
    ],
    "description": "Creates a React useContext hooks",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React useState hooks": {
    "prefix": "useStateSnip",
    "body": [
      "const [${1:name}, set${1/(.*)/${1:/capitalize}/}] = useState(${3:state})",
      ""
    ],
    "description": "Creates a React useState hooks",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React useReducer hooks": {
    "prefix": "useReducerSnip",
    "body": [
      "const ${1:stateVariable}, dispatch${1/(.*)/${1:/capitalize}/}] = useReducer(${2:reducerFunction}, ${3:initialState}, ${4:initializationFunction})",
      ""
    ],
    "description": "Creates a React useReducer hooks",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React useCallback hooks": {
    "prefix": "useCallbackSnip",
    "body": [
      "const ${1:name} = useCallback(() => {",
      "  ${2:logic}",
      "}, [])",
      ""
    ],
    "description": "Creates a React useCallback hooks",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React useMemo hooks": {
    "prefix": "useMemoSnip",
    "body": [
      "const ${1:name} = useMemo(() => {",
      "  return ${2:logic}",
      "}, [${3:deps}])",
      ""
    ],
    "description": "Creates a React useMemo hooks",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React useRef hooks": {
    "prefix": "useRefSnip",
    "body": [
      "const ${1:name} = useRef(${2:value})",
      ""
    ],
    "description": "Creates a React useRef hooks",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React useImperativeHandle hooks": {
    "prefix": "useImperativeHandleSnip",
    "body": [
      "useImperativeHandle(${1:ref}, () => {",
      "  ${2:logic}",
      "",
      "  return { }",
      "}, [])",
      ""
    ],
    "description": "Creates a React useImperativeHandle hooks",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React useLayoutEffect hooks": {
    "prefix": "useLayoutEffectSnip",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:effects}",
      "",
      "  return () => {",
      "    ${2:cleanup}",
      "  }",
      "}, [${3:deps}])",
      ""
    ],
    "description": "Creates a React useLayoutEffect hooks",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React component with types": {
    "prefix": "vrct",
    "body": [
      "type Props = {}",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <div className=''>${2:children}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React functional component and props with types",
    "scope": "javascriptreact,typescriptreact"
  },
  "React component with interfaces": {
    "prefix": "vrci",
    "body": [
      "interface Props {}",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <div className=''>${1:children}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React functional component and props with interfaces",
    "scope": "typescriptreact,javascriptreact"
  },
  "React hooks with types": {
    "prefix": "vrht",
    "body": [
      "import { useState } from 'react'",
      "",
      "type State = { foo: boolean }",
      "export type ${1:${TM_FILENAME_BASE}} = ReturnType<typeof ${1:${TM_FILENAME_BASE}}>",
      "",
      "export function ${1:${TM_FILENAME_BASE}}() {",
      "  const [state, setState] = useState<State>({ foo: false })",
      "",
      "  return {",
      "    state",
      "  }",
      "}"
    ],
    "description": "Creates a React custom hooks with types",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React hooks with interfaces": {
    "prefix": "vrhi",
    "body": [
      "import { useState } from 'react'",
      "",
      "interface State { foo: boolean }",
      "export type ${1:${TM_FILENAME_BASE}} = ReturnType<typeof ${1:${TM_FILENAME_BASE}}>",
      "",
      "export function ${1:${TM_FILENAME_BASE}}() {",
      "  const [state, setState] = useState<State>({ foo: false })",
      "",
      "  return {",
      "    state",
      "  }",
      "}"
    ],
    "description": "Creates a React custom hooks with types",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React native stylesheet": {
    "prefix": "vrns",
    "body": [
      "const styles = StyleSheet.create({",
      "  ${1:first}",
      "})"
    ],
    "description": "Creates a React Native stylesheet",
    "scope": "typescriptreact,javascriptreact"
  },
  "React native component with types": {
    "prefix": "vrnt",
    "body": [
      "import { View, Text } from 'react-native'",
      "",
      "type Props = {}",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <View>",
      "      <Text>${2:text}</Text>",
      "    </View>",
      "  )",
      "}"
    ],
    "description": "Creates a React Native component with types",
    "scope": "typescriptreact,javascriptreact"
  },
  "React native component with interfaces": {
    "prefix": "vrnt",
    "body": [
      "import { View, Text } from 'react-native'",
      "",
      "interface Props {}",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <View>",
      "      <Text>${2:text}</Text>",
      "    </View>",
      "  )",
      "}"
    ],
    "description": "Creates a React Native component with interfaces",
    "scope": "typescriptreact,javascriptreact"
  }
}
